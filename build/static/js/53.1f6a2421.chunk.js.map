{"version":3,"sources":["pages/WalletRecharge/WalletRecharge.tsx","pages/WalletRecharge/index.ts","components/HeaderSkew/HeaderSkew.tsx","components/HeaderSkew/index.ts"],"names":["WalletRecharge","Form","useForm","form","dispatch","useDispatch","createPaymentLoading","useSelector","state","loadingReducer","EPaymentControllerAction","CREATE_PAYMENT","useState","visible","confirmRechargeModalState","setConfirmRechargeModalState","successRechargeModalState","setSuccessRechargeModalState","failedRechargeModalState","setFailedRechargeModalState","handleCloseConfirmRechargeModal","handleCloseSuccessRechargeModal","handleCloseFailedRechargeModal","handleCreatePaymentSuccess","response","window","open","paymentUrl","handleCreatePaymentFailed","className","HeaderSkew","title","onClick","navigate","LayoutPaths","Profile","Paths","Wallet","Icon","name","EIconName","AngleRight","color","EIconColor","ELECTRIC_VIOLET","onFinish","values","body","amount","bankCode","undefined","extraData","paymentMethod","data","Info","WHITE","Item","Input","placeholder","suffix","Button","type","htmlType","Modal","onClose","cancelButton","disabled","confirmButton","createPaymentAction","request","loading","style","marginBottom","formatMoneyVND","showSuffix","center","classNames"],"mappings":"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","file":"static/js/53.1f6a2421.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { navigate } from '@reach/router';\nimport { Form } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport HeaderSkew from '@/components/HeaderSkew';\nimport Icon, { EIconColor, EIconName } from '@/components/Icon';\nimport { LayoutPaths, Paths } from '@/pages/routers';\nimport Input from '@/components/Input';\nimport Button from '@/components/Button';\nimport Modal from '@/components/Modal';\nimport { createPaymentAction } from '@/redux/actions';\nimport { formatMoneyVND } from '@/utils/functions';\nimport { TRootState } from '@/redux/reducers';\nimport { EPaymentControllerAction } from '@/redux/actions/payment-controller/constants';\nimport { TBodyCreatePayment, TCreatePaymentResponse } from '@/services/api/payment-controller/types';\n\nimport './WalletRecharge.scss';\n\nconst WalletRecharge: React.FC = () => {\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n\n  const createPaymentLoading = useSelector(\n    (state: TRootState) => state.loadingReducer[EPaymentControllerAction.CREATE_PAYMENT],\n  );\n\n  const [confirmRechargeModalState, setConfirmRechargeModalState] = useState<{\n    visible: boolean;\n    data?: TBodyCreatePayment;\n  }>({\n    visible: false,\n  });\n\n  const [successRechargeModalState, setSuccessRechargeModalState] = useState<{\n    visible: boolean;\n  }>({\n    visible: false,\n  });\n\n  const [failedRechargeModalState, setFailedRechargeModalState] = useState<{\n    visible: boolean;\n  }>({\n    visible: false,\n  });\n\n  const handleOpenConfirmRechargeModal = (data: TBodyCreatePayment): void => {\n    setConfirmRechargeModalState({ visible: true, data });\n  };\n  const handleCloseConfirmRechargeModal = (): void => {\n    setConfirmRechargeModalState({ visible: false });\n  };\n  const handleSubmitConfirmRechargeModal = (): void => {\n    if (confirmRechargeModalState?.data)\n      dispatch(\n        createPaymentAction.request(\n          confirmRechargeModalState.data,\n          handleCreatePaymentSuccess,\n          handleCreatePaymentFailed,\n        ),\n      );\n  };\n  // const handleOpenSuccessRechargeModal = (): void => {\n  //   setSuccessRechargeModalState({ visible: true });\n  // };\n  const handleCloseSuccessRechargeModal = (): void => {\n    setSuccessRechargeModalState({ visible: false });\n  };\n  const handleSubmitSuccessRechargeModal = (): void => {\n    navigate(`${LayoutPaths.Profile}${Paths.Wallet}`);\n    handleCloseSuccessRechargeModal();\n  };\n  const handleOpenFailedRechargeModal = (): void => {\n    setFailedRechargeModalState({ visible: true });\n  };\n  const handleCloseFailedRechargeModal = (): void => {\n    setFailedRechargeModalState({ visible: false });\n  };\n  const handleSubmitFailedRechargeModal = (): void => {\n    handleCloseFailedRechargeModal();\n  };\n\n  const handleNavigateWallet = (): void => {\n    navigate(`${LayoutPaths.Profile}${Paths.Wallet}`);\n  };\n\n  const handleSubmit = (values: any): void => {\n    const body = {\n      amount: values.amount,\n      bankCode: undefined,\n      extraData: undefined,\n      paymentMethod: undefined,\n    };\n    handleOpenConfirmRechargeModal(body);\n  };\n\n  const handleCreatePaymentSuccess = (response: TCreatePaymentResponse): void => {\n    handleCloseConfirmRechargeModal();\n    window.open(response.paymentUrl, '_blank');\n    // handleOpenSuccessRechargeModal();\n  };\n\n  const handleCreatePaymentFailed = (): void => {\n    handleCloseConfirmRechargeModal();\n    handleOpenFailedRechargeModal();\n  };\n\n  return (\n    <div className=\"WalletRecharge style-container\">\n      <HeaderSkew title=\"Nạp tiền\" />\n\n      <div className=\"WalletRecharge-back flex items-center\" onClick={handleNavigateWallet}>\n        <Icon name={EIconName.AngleRight} color={EIconColor.ELECTRIC_VIOLET} />\n        Quay lại\n      </div>\n      <div className=\"WalletRecharge-main\">\n        <Form form={form} onFinish={handleSubmit}>\n          <div className=\"WalletRecharge-badge flex items-start\">\n            <Icon name={EIconName.Info} color={EIconColor.WHITE} />\n            Bạn sẽ thanh toán bằng cách chuyển khoản hoặc giao dịch qua Appotapay với Vnsupplements\n          </div>\n\n          <div className=\"WalletRecharge-group\">\n            <Form.Item name=\"amount\">\n              <Input placeholder=\"Nhập số tiền\" suffix=\"đ\" />\n            </Form.Item>\n          </div>\n\n          <div className=\"WalletRecharge-group\">\n            {/* <div className=\"WalletRecharge-text bold\">Phương thức thanh toán</div>\n\n            <Form.Item name=\"paymentMethod\">\n              <Select placeholder=\"Phương thức thanh toán\" />\n            </Form.Item> */}\n\n            {/* <div className=\"WalletRecharge-text bold\">Lưu ý</div>\n            <div className=\"WalletRecharge-text gray\">\n              Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the\n              industrys standard dummy text ever since the 1500s\n            </div> */}\n\n            <div className=\"WalletRecharge-submit flex justify-center\">\n              <Button type=\"primary\" htmlType=\"submit\" title=\"Nạp tiền\" />\n            </div>\n          </div>\n        </Form>\n      </div>\n\n      <Modal\n        {...confirmRechargeModalState}\n        onClose={handleCloseConfirmRechargeModal}\n        cancelButton={{ title: 'Quay lại', onClick: handleCloseConfirmRechargeModal, disabled: createPaymentLoading }}\n        confirmButton={{ title: 'Đồng ý', onClick: handleSubmitConfirmRechargeModal, loading: createPaymentLoading }}\n      >\n        <div className=\"Modal-body-title\" style={{ marginBottom: '1.5rem' }}>\n          Nạp tiền: {formatMoneyVND({ amount: confirmRechargeModalState?.data?.amount || 0, showSuffix: true })}\n        </div>\n        <div className=\"Modal-body-description\">\n          Bạn có chắc chắn muốn nạp{' '}\n          <strong>{formatMoneyVND({ amount: confirmRechargeModalState?.data?.amount || 0, showSuffix: true })}</strong>{' '}\n          vào ví VN Supplements thanh toán qua phương thức <strong>Appotapay</strong> không?\n        </div>\n      </Modal>\n\n      <Modal\n        {...successRechargeModalState}\n        onClose={handleCloseSuccessRechargeModal}\n        confirmButton={{ title: 'Đồng ý', onClick: handleSubmitSuccessRechargeModal }}\n      >\n        <div className=\"Modal-body-title\" style={{ marginBottom: '1.5rem' }}>\n          Nạp tiền thành công\n        </div>\n        <div className=\"Modal-body-description\">Thông tin nạp tiền của bạn đã được quản trị viên xét duyệt.</div>\n      </Modal>\n\n      <Modal\n        {...failedRechargeModalState}\n        onClose={handleCloseFailedRechargeModal}\n        confirmButton={{ title: 'Đồng ý', onClick: handleSubmitFailedRechargeModal }}\n      >\n        <div className=\"Modal-body-title\" style={{ marginBottom: '1.5rem' }}>\n          Nạp tiền không thành công\n        </div>\n        <div className=\"Modal-body-description\">Có một sự cố đã xảy ra. Vui lòng thử lại sau</div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default WalletRecharge;\n","import WalletRecharge from './WalletRecharge';\n\nexport default WalletRecharge;\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { THeaderSkewProps } from '@/components/HeaderSkew/HeaderSkew.types';\n\nimport './HeaderSkew.scss';\n\nconst HeaderSkew: React.FC<THeaderSkewProps> = ({ className, center, title, onClick }) => {\n  return (\n    <div\n      className={classNames('HeaderSkew flex', className, { 'justify-center': center }, { 'cursor-pointer': onClick })}\n      onClick={onClick}\n    >\n      <div className=\"HeaderSkew-item\">\n        <div className=\"HeaderSkew-title\">{title}</div>\n        <div className=\"HeaderSkew-subtitle\">VNSUPPLEMENTS</div>\n      </div>\n    </div>\n  );\n};\n\nexport default HeaderSkew;\n","import HeaderSkew from './HeaderSkew';\n\nexport * from './HeaderSkew.types';\nexport default HeaderSkew;\n"],"sourceRoot":""}
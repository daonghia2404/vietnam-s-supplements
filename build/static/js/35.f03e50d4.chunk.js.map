{"version":3,"sources":["pages/CartsNotLogin/CartsNotLogin.tsx","pages/CartsNotLogin/index.ts","components/TextArea/TextArea.tsx","components/TextArea/index.ts"],"names":["Carts","dispatch","useDispatch","Form","useForm","form","useState","cartsChecked","setCartsChecked","isCheckoutStep","setIsCheckoutStep","addressState","useSelector","state","addressReducer","districtCode","cityCode","getAddressParamsRequest","setGetAddressParamsRequest","isDisabledCityField","city","length","isDisabledDistrictField","district","isDisabledCommuneField","commune","cartsStorage","uiReducer","carts","createCartLoading","loadingReducer","ECartControllerAction","CREATE_CART","createPaymentOrderLoading","EPaymentControllerAction","CREATE_PAYMENT_ORDER","checkoutOrderLoading","EOrderControllerAction","CHECKOUT_ORDER","loading","isEmpty","handleChangeAddress","setFieldsValue","getAddressData","useCallback","getAddressAction","request","handleCreateOrderSuccess","response","handleCreatePaymentSuccess","window","open","paymentUrl","handleCheckoutOrderSuccess","showNotification","ETypeNotification","SUCCESS","uiActions","setCartsStorage","navigate","Paths","Home","useEffect","scrollToTop","typePayment","dataPaymentMethodOptions","className","HeaderSkew","title","EmptyBox","buttonProps","onClick","Categorys","onFinish","values","value","body","cartId","id","address","addressReceiver","referCode","districtReceiver","label","cityReceiver","communeReceiver","phone","phoneReceiver","nameUser","name","nameReceiver","email","note","checkoutOrderAction","EOrderPayment","SHIP_COD","WALLET","paymentBody","orderId","amount","String","totalprice","bankCode","undefined","extraData","paymentMethod","createPaymentOrderAction","cart","map","item","product","createCartAction","Item","rules","validationRules","required","Input","placeholder","size","onlyNumeric","Select","options","disabled","onChange","option","TextArea","isSamePriceAndCostPrice","costPrice","price","classNames","data","newCartsData","handleDeleteCartLocalStorage","handleRemoveCart","Icon","EIconName","Close","src","image","onError","handleErrorImageUrl","alt","dateStartEat","dateEndEat","formatISODateToDateTime","EFormatDate","COMMON","formatMoneyVND","showSuffix","Boolean","Amount","handleChangeAmountCartLocalStorage","handleChangeAmount","Radio","reduce","result","Number","Button","type","htmlType","CartsNotLogin","AntdTextArea"],"mappings":"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","file":"static/js/35.f03e50d4.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { navigate } from '@reach/router';\nimport classNames from 'classnames';\nimport { Form } from 'antd';\n\nimport HeaderSkew from '@/components/HeaderSkew';\nimport Amount from '@/components/Amount';\nimport Button from '@/components/Button';\nimport Icon, { EIconName } from '@/components/Icon';\nimport { TRootState } from '@/redux/reducers';\nimport { ECartControllerAction } from '@/redux/actions/cart-controller/constants';\nimport EmptyBox from '@/components/EmptyBox';\nimport { Paths } from '@/pages/routers';\nimport { TCartResponse, TCreateCartResponse } from '@/services/api/cart-controller/types';\nimport {\n  formatISODateToDateTime,\n  formatMoneyVND,\n  handleErrorImageUrl,\n  scrollToTop,\n  showNotification,\n  validationRules,\n} from '@/utils/functions';\nimport { EFormatDate, ETypeNotification } from '@/common/enums';\nimport {\n  checkoutOrderAction,\n  createCartAction,\n  createPaymentOrderAction,\n  getAddressAction,\n  uiActions,\n} from '@/redux/actions';\nimport Radio from '@/components/Radio';\nimport { dataPaymentMethodOptions } from '@/pages/Carts/Carts.data';\nimport { handleChangeAmountCartLocalStorage, handleDeleteCartLocalStorage } from '@/utils/cart';\nimport Input from '@/components/Input';\nimport Select from '@/components/Select';\nimport TextArea from '@/components/TextArea';\nimport '@/pages/Checkout/Checkout.scss';\nimport { TParamsGetAddress } from '@/services/api/address-controller/types';\nimport { EOrderPayment } from '@/services/api/order-controller/enums';\nimport { TCreatePaymentResponse } from '@/services/api/payment-controller/types';\nimport { EPaymentControllerAction } from '@/redux/actions/payment-controller/constants';\nimport { EOrderControllerAction } from '@/redux/actions/order-controller/constants';\n\nimport './CartsNotLogin.scss';\n\nconst Carts: React.FC = () => {\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n\n  const [cartsChecked, setCartsChecked] = useState<TCartResponse[]>([]);\n  const [isCheckoutStep, setIsCheckoutStep] = useState<TCreateCartResponse | undefined>();\n  const addressState = useSelector((state: TRootState) => state.addressReducer);\n\n  const [getAddressParamsRequest, setGetAddressParamsRequest] = useState<TParamsGetAddress>({\n    districtCode: null,\n    cityCode: null,\n  });\n\n  const isDisabledCityField = addressState.city.length === 0;\n  const isDisabledDistrictField = addressState.district.length === 0;\n  const isDisabledCommuneField = addressState.commune.length === 0;\n\n  const cartsStorage = useSelector((state: TRootState) => state.uiReducer.cartsStorage) || [];\n  const carts = cartsStorage;\n\n  const createCartLoading = useSelector((state: TRootState) => state.loadingReducer[ECartControllerAction.CREATE_CART]);\n  const createPaymentOrderLoading = useSelector(\n    (state: TRootState) => state.loadingReducer[EPaymentControllerAction.CREATE_PAYMENT_ORDER],\n  );\n  const checkoutOrderLoading = useSelector(\n    (state: TRootState) => state.loadingReducer[EOrderControllerAction.CHECKOUT_ORDER],\n  );\n  const loading = createCartLoading || createPaymentOrderLoading || checkoutOrderLoading;\n  const isEmpty = carts?.length === 0;\n\n  const handleChangeAddress = (cityCode?: string | null, districtCode?: string | null): void => {\n    if (cityCode && !districtCode) form.setFieldsValue({ district: null });\n\n    setGetAddressParamsRequest({\n      cityCode: cityCode || null,\n      districtCode: districtCode || null,\n    });\n  };\n\n  const getAddressData = useCallback(() => {\n    dispatch(getAddressAction.request(getAddressParamsRequest));\n  }, [dispatch, getAddressParamsRequest]);\n\n  const getAddressWithExistedCity = (): void => {\n    dispatch(\n      getAddressAction.request({\n        cityCode: getAddressParamsRequest.cityCode,\n        districtCode: null,\n      }),\n    );\n  };\n\n  const getAddressWithExistedCityAndDistrict = (): void => {\n    dispatch(\n      getAddressAction.request({\n        cityCode: getAddressParamsRequest.cityCode,\n        districtCode: getAddressParamsRequest.districtCode,\n      }),\n    );\n  };\n\n  const handleChangeAmount = (amount: number, data: TCartResponse): void => {\n    const newCartsData = handleChangeAmountCartLocalStorage(cartsStorage, data.id, amount);\n    dispatch(uiActions.setCartsStorage(newCartsData));\n  };\n\n  const handleRemoveCart = (data: TCartResponse): void => {\n    const newCartsData = handleDeleteCartLocalStorage(cartsStorage, data.id);\n    dispatch(uiActions.setCartsStorage(newCartsData));\n  };\n\n  const handleClickContinueShopping = (): void => {\n    navigate(Paths.Categorys);\n  };\n\n  const handleSubmitCart = (values: any): void => {\n    if (isCheckoutStep) {\n      const typePayment = values.typePayment?.value;\n\n      const body = {\n        cartId: isCheckoutStep?.id,\n        typePayment,\n        address: values?.address,\n        addressReceiver: values?.address,\n        referCode: values?.referCode || '',\n        district: values?.district?.value,\n        districtReceiver: values?.district?.label,\n        city: values?.city?.value,\n        cityReceiver: values?.city?.label,\n        commune: values?.commune?.value,\n        communeReceiver: values?.commune?.label,\n        phone: values?.phone,\n        phoneReceiver: values?.phone,\n        nameUser: values?.name,\n        nameReceiver: values?.name,\n        email: values?.email || '',\n        note: values?.note,\n      };\n      dispatch(\n        checkoutOrderAction.request(body, (response): void => {\n          if (typePayment === EOrderPayment.SHIP_COD) {\n            handleCheckoutOrderSuccess();\n          }\n\n          if (typePayment === EOrderPayment.WALLET) {\n            const paymentBody: any = {\n              orderId: response.id,\n              amount: String(isCheckoutStep.totalprice),\n              bankCode: undefined,\n              extraData: undefined,\n              paymentMethod: undefined,\n            };\n            dispatch(createPaymentOrderAction.request(paymentBody, handleCreatePaymentSuccess));\n          }\n        }),\n      );\n    } else {\n      const body = {\n        cart: carts.map((item) => ({\n          product: item.product,\n          amount: item.amount,\n        })),\n      };\n      dispatch(createCartAction.request(body, handleCreateOrderSuccess));\n    }\n  };\n\n  const handleCreateOrderSuccess = (response: TCreateCartResponse): void => {\n    setIsCheckoutStep(response);\n  };\n\n  const handleCreatePaymentSuccess = (response: TCreatePaymentResponse): void => {\n    window.open(response.paymentUrl, '_blank');\n  };\n\n  const handleCheckoutOrderSuccess = (): void => {\n    showNotification(ETypeNotification.SUCCESS, 'Tạo đơn hàng thành công');\n    dispatch(uiActions.setCartsStorage([]));\n    navigate(Paths.Home);\n  };\n\n  const caculatorTotalPrice = (): number => {\n    const total = cartsChecked.reduce((result, item) => {\n      const newResult = result + Number(item.product?.price || item.product?.costPrice) * item.amount;\n\n      return newResult;\n    }, 0);\n\n    return total;\n  };\n\n  useEffect(() => {\n    getAddressData();\n  }, [getAddressData]);\n\n  useEffect(() => {\n    if (getAddressParamsRequest.cityCode) getAddressWithExistedCity();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [getAddressParamsRequest.cityCode]);\n\n  useEffect(() => {\n    if (getAddressParamsRequest.cityCode && getAddressParamsRequest.districtCode)\n      getAddressWithExistedCityAndDistrict();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [getAddressParamsRequest]);\n\n  useEffect(() => {\n    setCartsChecked(carts || []);\n  }, [carts]);\n\n  useEffect(() => {\n    scrollToTop();\n  }, []);\n\n  useEffect(() => {\n    form.setFieldsValue({\n      typePayment: dataPaymentMethodOptions?.[0],\n    });\n  }, [form]);\n\n  return (\n    <div className=\"Carts\">\n      <HeaderSkew title=\"Giỏ hàng\" />\n\n      {isEmpty ? (\n        <EmptyBox\n          title=\"Chưa có sản phẩm nào trong giỏ hàng của bạn\"\n          buttonProps={{ title: 'Tiếp tục mua sắm', onClick: handleClickContinueShopping }}\n        />\n      ) : (\n        <Form form={form} onFinish={handleSubmitCart}>\n          <div className=\"Carts-wrapper flex justify-between flex-wrap\">\n            <div className=\"Carts-wrapper-item\">\n              {isCheckoutStep ? (\n                <div className=\"Carts-checkout\">\n                  <div className=\"Checkout-description\">\n                    Xin vui lòng điền đầy đủ thông tin dưới đây để hoàn tất đơn hàng\n                  </div>\n                  <div className=\"Checkout-subtitle\">THÔNG TIN THANH TOÁN</div>\n\n                  <div className=\"Checkout-form-row flex justify-between flex-wrap\">\n                    <Form.Item name=\"name\" rules={[validationRules.required()]}>\n                      <Input placeholder=\"Nhập họ tên\" size=\"large\" />\n                    </Form.Item>\n                    <Form.Item name=\"phone\" rules={[validationRules.required(), validationRules.onlyNumeric()]}>\n                      <Input placeholder=\"Nhập số điện thoại\" size=\"large\" />\n                    </Form.Item>\n                  </div>\n\n                  <div className=\"Checkout-form-row\">\n                    <Form.Item name=\"email\" rules={[validationRules.email()]}>\n                      <Input placeholder=\"Nhập email\" size=\"large\" />\n                    </Form.Item>\n                  </div>\n\n                  <div className=\"Checkout-form-row flex justify-between flex-wrap\">\n                    <Form.Item name=\"city\" rules={[validationRules.required()]}>\n                      <Select\n                        placeholder=\"Tỉnh / thành phố\"\n                        options={addressState.city}\n                        disabled={isDisabledCityField}\n                        onChange={(option): void => handleChangeAddress(option?.value)}\n                      />\n                    </Form.Item>\n                    <Form.Item name=\"district\" rules={[validationRules.required()]}>\n                      <Select\n                        placeholder=\"Quận / huyện\"\n                        options={addressState.district}\n                        disabled={isDisabledDistrictField}\n                        onChange={(option): void =>\n                          handleChangeAddress(getAddressParamsRequest.cityCode, option?.value)\n                        }\n                      />\n                    </Form.Item>\n                  </div>\n\n                  <div className=\"Checkout-form-row\">\n                    <Form.Item name=\"commune\" rules={[validationRules.required()]}>\n                      <Select\n                        placeholder=\"Xã / phường\"\n                        options={addressState.commune}\n                        disabled={isDisabledCommuneField}\n                      />\n                    </Form.Item>\n                  </div>\n\n                  <div className=\"Checkout-form-row\">\n                    <Form.Item name=\"address\" rules={[validationRules.required()]}>\n                      <TextArea placeholder=\"Nhập địa chỉ cụ thể\" />\n                    </Form.Item>\n                  </div>\n\n                  <div className=\"Checkout-subtitle\">LƯU Ý ĐẶC BIỆT</div>\n                  <div className=\"Checkout-form-row\">\n                    <Form.Item name=\"note\">\n                      <TextArea placeholder=\"Ghi chú (có thể bỏ trống)\" />\n                    </Form.Item>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"Carts-orders\">\n                  {carts?.map((item) => {\n                    const isSamePriceAndCostPrice = item?.product?.costPrice === item?.product?.price;\n\n                    return (\n                      <div key={item.id} className=\"Carts-orders-item flex items-start justify-between\">\n                        <div\n                          className={classNames('Carts-orders-item-remove')}\n                          onClick={(): void => handleRemoveCart(item)}\n                        >\n                          <Icon name={EIconName.Close} />\n                        </div>\n                        <div className=\"Carts-orders-item-image\">\n                          <img src={item?.product?.image} onError={handleErrorImageUrl} alt=\"\" />\n                        </div>\n                        <div className=\"Carts-orders-item-info\">\n                          <div className=\"Carts-orders-item-title\">{item.product.name}</div>\n                          {item.dateStartEat && item.dateEndEat && (\n                            <div className=\"Carts-orders-item-date\">\n                              Từ {formatISODateToDateTime(item.dateStartEat, EFormatDate.COMMON)} - đến{' '}\n                              {formatISODateToDateTime(item.dateEndEat, EFormatDate.COMMON)}\n                            </div>\n                          )}\n\n                          <div className=\"Carts-orders-item-price\">\n                            {formatMoneyVND({ amount: item.product.price, showSuffix: true })}{' '}\n                            {Boolean(item?.product?.costPrice) && !isSamePriceAndCostPrice && (\n                              <del>\n                                {formatMoneyVND({\n                                  amount: item?.product?.costPrice || 0,\n                                  showSuffix: true,\n                                })}\n                              </del>\n                            )}\n                          </div>\n                          <div className=\"Carts-orders-item-amount flex justify-between\">\n                            Số lượng:\n                            <Amount value={item.amount} onChange={(value): void => handleChangeAmount(value, item)} />\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n            <div className=\"Carts-wrapper-item\">\n              <div className=\"Carts-card\">\n                <div className=\"Carts-card-title\">Phương thức thanh toán</div>\n\n                <Form.Item name=\"typePayment\" rules={[validationRules.required()]}>\n                  <Radio options={dataPaymentMethodOptions} />\n                </Form.Item>\n\n                <Form.Item name=\"referCode\">\n                  <Input placeholder=\"Nhập mã giới thiệu\" />\n                </Form.Item>\n\n                <div className=\"Carts-row-summary\">\n                  <div className=\"Carts-row flex justify-between\">\n                    <div className=\"Carts-row-text\">Tổng giá tiền</div>\n                    <div className=\"Carts-row-text\">\n                      <strong>{formatMoneyVND({ amount: caculatorTotalPrice(), showSuffix: true })}</strong>\n                    </div>\n                  </div>\n                  <div className=\"Carts-row-submit\">\n                    <Button\n                      type=\"primary\"\n                      title={isCheckoutStep ? 'Đặt hàng' : 'Tiếp tục'}\n                      size=\"large\"\n                      htmlType=\"submit\"\n                      loading={loading}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Form>\n      )}\n    </div>\n  );\n};\n\nexport default Carts;\n","import CartsNotLogin from './CartsNotLogin';\n\nexport default CartsNotLogin;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Input } from 'antd';\n\nimport { TTextAreaProps } from '@/components/TextArea/TextArea.types';\n\nimport './TextArea.scss';\n\nconst { TextArea: AntdTextArea } = Input;\n\nconst TextArea: React.FC<TTextAreaProps> = ({ className, size, placeholder, onChange, value }) => {\n  return (\n    <div className={classNames('TextArea', className)}>\n      <AntdTextArea size={size} placeholder={placeholder} value={value} onChange={onChange} />\n    </div>\n  );\n};\n\nexport default TextArea;\n","import TextArea from './TextArea';\n\nexport * from './TextArea.types';\nexport default TextArea;\n"],"sourceRoot":""}
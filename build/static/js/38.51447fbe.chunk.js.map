{"version":3,"sources":["components/CountdownTime/index.ts","components/CountdownTime/CountdownTime.tsx","pages/AccountVerification/AccountVerification.tsx","pages/AccountVerification/index.ts","assets/images/image-auth-banner.png","containers/AuthForm/AuthForm.tsx","containers/AuthForm/index.ts","services/api/auth-controller/enums.ts"],"names":["CountdownTime","defaultValue","format","onFinish","useState","value","setValue","useEffect","diffTime","moment","unix","duration","interval","setInterval","minutes","seconds","clearInterval","Number","showValue","AccountVerification","Form","useForm","form","dispatch","useDispatch","location","useLocation","dataLocationState","state","registerLoading","useSelector","loadingReducer","EAuthControllerAction","REGISTER","confirmOtpForgotPasswordLoading","CONFIRM_OTP_FORGOT_PASSWORD","sendOtpLoading","SEND_OTP","loading","isEnd","countdownState","setCountdownState","handleConfirmOtpForgotPasswordSuccess","body","navigate","LayoutPaths","Auth","Paths","ChangePasswordCode","type","ETypeSendOTP","FORGOT_PASSWORD","handleRegisterSuccess","showNotification","ETypeNotification","SUCCESS","Login","handleSendOtpSuccess","includes","AuthForm","className","phone","values","code","registerAction","request","confirmOtpForgotPasswordAction","Item","name","rules","validationRules","required","Input","placeholder","classNames","disabled","onClick","bodySendOtp","sendOtpAction","style","marginTop","Button","title","htmlType","children","src","ImageAuthBanner","alt","ERole"],"mappings":"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","file":"static/js/38.51447fbe.chunk.js","sourcesContent":["import CountdownTime from './CountdownTime';\n\nexport * from './CountdownTime.types';\nexport default CountdownTime;\n","import React, { useEffect, useState } from 'react';\nimport moment, { Duration } from 'moment';\n\nimport { TCountdownTimeProps } from '@/components/CountdownTime/CountdownTime.types';\n\nconst CountdownTime: React.FC<TCountdownTimeProps> = ({ defaultValue = '00:00', format = 'mm:ss', onFinish }) => {\n  const [value, setValue] = useState<Duration | undefined>();\n\n  const showValue = (): string => {\n    const minutes = Number(value?.minutes?.()) < 10 ? `0${value?.minutes()}` : value?.minutes();\n    const seconds = Number(value?.seconds?.()) < 10 ? `0${value?.seconds()}` : value?.seconds();\n\n    return value ? `${minutes}:${seconds}` : defaultValue;\n  };\n\n  useEffect(() => {\n    const unixValue = moment(defaultValue, format).unix();\n    const currentValue = moment('00:00', format).unix();\n    const diffTime = unixValue - currentValue;\n    let duration: any = moment.duration(diffTime * 1000, 'milliseconds');\n\n    const interval = setInterval(() => {\n      duration = moment.duration(duration - 1000, 'milliseconds');\n      setValue(duration);\n\n      const isCountEnd = duration?.minutes() === 0 && duration?.seconds() === 0;\n\n      if (isCountEnd) {\n        onFinish?.();\n        clearInterval(interval);\n      }\n    }, 1000);\n\n    return (): void => {\n      clearInterval(interval);\n    };\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [defaultValue]);\n\n  return <>{showValue()}</>;\n};\n\nexport default CountdownTime;\n","import React, { useEffect, useState } from 'react';\nimport { Form } from 'antd';\nimport { navigate, useLocation } from '@reach/router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\n\nimport AuthForm from '@/containers/AuthForm';\nimport Input from '@/components/Input';\nimport Button from '@/components/Button';\nimport { showNotification, validationRules } from '@/utils/functions';\nimport CountdownTime from '@/components/CountdownTime';\nimport { confirmOtpForgotPasswordAction, registerAction, sendOtpAction } from '@/redux/actions';\nimport { LayoutPaths, Paths } from '@/pages/routers';\nimport { ETypeNotification } from '@/common/enums';\nimport { ETypeSendOTP } from '@/services/api/auth-controller/enums';\nimport { EAuthControllerAction } from '@/redux/actions/auth-controller/constants';\nimport { TRootState } from '@/redux/reducers';\n\nimport './AccountVerification.scss';\n\nconst AccountVerification: React.FC = () => {\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const location: any = useLocation();\n  const dataLocationState = location?.state;\n\n  const registerLoading = useSelector((state: TRootState) => state.loadingReducer[EAuthControllerAction.REGISTER]);\n  const confirmOtpForgotPasswordLoading = useSelector(\n    (state: TRootState) => state.loadingReducer[EAuthControllerAction.CONFIRM_OTP_FORGOT_PASSWORD],\n  );\n  const sendOtpLoading = useSelector((state: TRootState) => state.loadingReducer[EAuthControllerAction.SEND_OTP]);\n\n  const loading = registerLoading || confirmOtpForgotPasswordLoading;\n\n  const [countdownState, setCountdownState] = useState<{\n    isEnd: boolean;\n  }>({\n    isEnd: false,\n  });\n\n  const handleSubmit = (values: any): void => {\n    const body = {\n      ...dataLocationState.body,\n      code: values.code,\n    };\n\n    switch (dataLocationState.type) {\n      case ETypeSendOTP.REGISTER:\n        dispatch(registerAction.request(body, handleRegisterSuccess));\n        break;\n      case ETypeSendOTP.FORGOT_PASSWORD:\n        dispatch(confirmOtpForgotPasswordAction.request(body, (): void => handleConfirmOtpForgotPasswordSuccess(body)));\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleConfirmOtpForgotPasswordSuccess = (body: { code: string; phone: string }): void => {\n    navigate(`${LayoutPaths.Auth}${Paths.ChangePasswordCode}`, { state: { type: ETypeSendOTP.FORGOT_PASSWORD, body } });\n  };\n\n  const handleRegisterSuccess = (): void => {\n    showNotification(ETypeNotification.SUCCESS, 'Đăng ký tài khoản thành công');\n    navigate(`${LayoutPaths.Auth}${Paths.Login}`);\n  };\n\n  const handleResendCode = (): void => {\n    if (countdownState.isEnd) {\n      const bodySendOtp = {\n        phone: dataLocationState.body.phone,\n        type: dataLocationState.type,\n      };\n\n      dispatch(sendOtpAction.request(bodySendOtp, handleSendOtpSuccess));\n    }\n  };\n\n  const handleSendOtpSuccess = (): void => {\n    showNotification(ETypeNotification.SUCCESS, 'Gửi lại mã xác nhận thành công');\n\n    setCountdownState({\n      isEnd: false,\n    });\n  };\n\n  const handleCountdownFinish = (): void => {\n    setCountdownState({\n      isEnd: true,\n    });\n  };\n\n  useEffect(() => {\n    const dataNavigateFrom = [ETypeSendOTP.FORGOT_PASSWORD, ETypeSendOTP.REGISTER].includes(dataLocationState?.type);\n    if (!dataNavigateFrom) navigate(LayoutPaths.Auth);\n  }, [dataLocationState]);\n\n  return (\n    <div>\n      <AuthForm>\n        <div className=\"AuthForm-header\">\n          <div className=\"AuthForm-header-title\">Xác thực tài khoản</div>\n          <div className=\"AuthForm-header-description\">\n            Mã xác nhận đã được gửi qua tin nhắn SMS của số điện thoại <span>{dataLocationState?.body?.phone}</span>\n          </div>\n        </div>\n\n        <div className=\"AuthForm-main flex flex-col\">\n          <Form className=\"AuthForm-main-form\" form={form} onFinish={handleSubmit}>\n            <Form.Item name=\"code\" rules={[validationRules.required()]}>\n              <Input placeholder=\"Mã xác thực\" />\n            </Form.Item>\n\n            <div className=\"AccountVerification-otp\">\n              <div className=\"AccountVerification-otp-description\">Chưa nhận được mã OTP?</div>\n              <div\n                className={classNames('AccountVerification-otp-description', {\n                  disabled: !countdownState.isEnd || sendOtpLoading,\n                })}\n              >\n                <span onClick={handleResendCode}>Gửi lại </span>\n                {!countdownState.isEnd && (\n                  <>\n                    (<CountdownTime defaultValue=\"02:00\" onFinish={handleCountdownFinish} />)\n                  </>\n                )}\n              </div>\n            </div>\n\n            <Form.Item style={{ marginTop: '4rem' }}>\n              <Button title=\"Tiếp Theo\" type=\"primary\" htmlType=\"submit\" loading={loading} />\n            </Form.Item>\n          </Form>\n        </div>\n      </AuthForm>\n    </div>\n  );\n};\n\nexport default AccountVerification;\n","import AccountVerification from './AccountVerification';\n\nexport default AccountVerification;\n","export default __webpack_public_path__ + \"static/media/image-auth-banner.5bdeb1fe.png\";","import React from 'react';\n\nimport { TAuthFormProps } from '@/containers/AuthForm/AuthForm.types';\nimport ImageAuthBanner from '@/assets/images/image-auth-banner.png';\n\nimport './AuthForm.scss';\n\nconst AuthForm: React.FC<TAuthFormProps> = ({ children }) => {\n  return (\n    <div className=\"AuthForm\">\n      <div className=\"AuthForm-card flex flex-wrap\">\n        <div className=\"AuthForm-item\">\n          <div className=\"AuthForm-item-image\">\n            <img src={ImageAuthBanner} alt=\"\" />\n          </div>\n        </div>\n        <div className=\"AuthForm-item\">{children}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default AuthForm;\n","import AuthForm from './AuthForm';\n\nexport default AuthForm;\n","export enum ERole {\n  USER = 1,\n  PT = 2,\n  ADMIN = 3,\n  SUPER_ADMIN = 4,\n}\n\nexport enum ETypeSendOTP {\n  REGISTER = 'register',\n  FORGOT_PASSWORD = 'forgotPassword',\n}\n"],"sourceRoot":""}